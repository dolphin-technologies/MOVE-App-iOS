//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public class ApiMessage: APIModel {

    public var action: String?

    public var deleted: Bool?

    public var iconType: String?

    public var id: Int?

    public var preview: String?

    public var read: Bool?

    /** a timestamp as an ISO 8601 date time with an offset */
    public var sentTime: DateTime?

    public var text: String?

    public var topic: String?

    public var url: String?

    public var vote: String?

    public init(action: String? = nil, deleted: Bool? = nil, iconType: String? = nil, id: Int? = nil, preview: String? = nil, read: Bool? = nil, sentTime: DateTime? = nil, text: String? = nil, topic: String? = nil, url: String? = nil, vote: String? = nil) {
        self.action = action
        self.deleted = deleted
        self.iconType = iconType
        self.id = id
        self.preview = preview
        self.read = read
        self.sentTime = sentTime
        self.text = text
        self.topic = topic
        self.url = url
        self.vote = vote
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        action = try container.decodeIfPresent("action")
        deleted = try container.decodeIfPresent("deleted")
        iconType = try container.decodeIfPresent("iconType")
        id = try container.decodeIfPresent("id")
        preview = try container.decodeIfPresent("preview")
        read = try container.decodeIfPresent("read")
        sentTime = try container.decodeIfPresent("sentTime")
        text = try container.decodeIfPresent("text")
        topic = try container.decodeIfPresent("topic")
        url = try container.decodeIfPresent("url")
        vote = try container.decodeIfPresent("vote")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(action, forKey: "action")
        try container.encodeIfPresent(deleted, forKey: "deleted")
        try container.encodeIfPresent(iconType, forKey: "iconType")
        try container.encodeIfPresent(id, forKey: "id")
        try container.encodeIfPresent(preview, forKey: "preview")
        try container.encodeIfPresent(read, forKey: "read")
        try container.encodeIfPresent(sentTime, forKey: "sentTime")
        try container.encodeIfPresent(text, forKey: "text")
        try container.encodeIfPresent(topic, forKey: "topic")
        try container.encodeIfPresent(url, forKey: "url")
        try container.encodeIfPresent(vote, forKey: "vote")
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? ApiMessage else { return false }
      guard self.action == object.action else { return false }
      guard self.deleted == object.deleted else { return false }
      guard self.iconType == object.iconType else { return false }
      guard self.id == object.id else { return false }
      guard self.preview == object.preview else { return false }
      guard self.read == object.read else { return false }
      guard self.sentTime == object.sentTime else { return false }
      guard self.text == object.text else { return false }
      guard self.topic == object.topic else { return false }
      guard self.url == object.url else { return false }
      guard self.vote == object.vote else { return false }
      return true
    }

    public static func == (lhs: ApiMessage, rhs: ApiMessage) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
