//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public class ApiBaseRequest: APIModel {

    public var timestamp: Int

    public var appId: String?

    public var clientVersion: String?

    public var contractId: String?

    public var isoTime: String?

    public var language: String?

    public var platform: String?

    public var productId: Int?

    public var uuid: String?

    public init(timestamp: Int, appId: String? = nil, clientVersion: String? = nil, contractId: String? = nil, isoTime: String? = nil, language: String? = nil, platform: String? = nil, productId: Int? = nil, uuid: String? = nil) {
        self.timestamp = timestamp
        self.appId = appId
        self.clientVersion = clientVersion
        self.contractId = contractId
        self.isoTime = isoTime
        self.language = language
        self.platform = platform
        self.productId = productId
        self.uuid = uuid
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        timestamp = try container.decode("timestamp")
        appId = try container.decodeIfPresent("appId")
        clientVersion = try container.decodeIfPresent("clientVersion")
        contractId = try container.decodeIfPresent("contractId")
        isoTime = try container.decodeAnyIfPresent("isoTime")
        language = try container.decodeIfPresent("language")
        platform = try container.decodeIfPresent("platform")
        productId = try container.decodeIfPresent("productId")
        uuid = try container.decodeIfPresent("uuid")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encode(timestamp, forKey: "timestamp")
        try container.encodeIfPresent(appId, forKey: "appId")
        try container.encodeIfPresent(clientVersion, forKey: "clientVersion")
        try container.encodeIfPresent(contractId, forKey: "contractId")
        try container.encodeIfPresent(isoTime, forKey: "isoTime")
        try container.encodeIfPresent(language, forKey: "language")
        try container.encodeIfPresent(platform, forKey: "platform")
        try container.encodeIfPresent(productId, forKey: "productId")
        try container.encodeIfPresent(uuid, forKey: "uuid")
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? ApiBaseRequest else { return false }
      guard self.timestamp == object.timestamp else { return false }
      guard self.appId == object.appId else { return false }
      guard self.clientVersion == object.clientVersion else { return false }
      guard self.contractId == object.contractId else { return false }
	  guard self.isoTime == object.isoTime else { return false }
      guard self.language == object.language else { return false }
      guard self.platform == object.platform else { return false }
      guard self.productId == object.productId else { return false }
      guard self.uuid == object.uuid else { return false }
      return true
    }

    public static func == (lhs: ApiBaseRequest, rhs: ApiBaseRequest) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
