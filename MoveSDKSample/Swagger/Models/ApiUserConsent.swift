//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public class ApiUserConsent: APIModel {

    public var docVersion: String?

    public var state: Bool?

    public var type: String?

    public var webUrl: String?

    public init(docVersion: String? = nil, state: Bool? = nil, type: String? = nil, webUrl: String? = nil) {
        self.docVersion = docVersion
        self.state = state
        self.type = type
        self.webUrl = webUrl
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        docVersion = try container.decodeIfPresent("docVersion")
        state = try container.decodeIfPresent("state")
        type = try container.decodeIfPresent("type")
        webUrl = try container.decodeIfPresent("webUrl")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(docVersion, forKey: "docVersion")
        try container.encodeIfPresent(state, forKey: "state")
        try container.encodeIfPresent(type, forKey: "type")
        try container.encodeIfPresent(webUrl, forKey: "webUrl")
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? ApiUserConsent else { return false }
      guard self.docVersion == object.docVersion else { return false }
      guard self.state == object.state else { return false }
      guard self.type == object.type else { return false }
      guard self.webUrl == object.webUrl else { return false }
      return true
    }

    public static func == (lhs: ApiUserConsent, rhs: ApiUserConsent) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
