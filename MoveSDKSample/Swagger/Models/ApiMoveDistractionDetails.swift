//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public class ApiMoveDistractionDetails: APIModel {

    public var distractedPhoneHandheldMinutes: Int?

    public var distractedPhoneHandheldPct: Int?

    public var distractedSwipeTypeMinutes: Int?

    public var distractedSwipeTypePct: Int?

    public var distractionFreeMinutes: Int?

    public var distractionFreePct: Int?

    public var totalDistractedMinutes: Int?

    public init(distractedPhoneHandheldMinutes: Int? = nil, distractedPhoneHandheldPct: Int? = nil, distractedSwipeTypeMinutes: Int? = nil, distractedSwipeTypePct: Int? = nil, distractionFreeMinutes: Int? = nil, distractionFreePct: Int? = nil, totalDistractedMinutes: Int? = nil) {
        self.distractedPhoneHandheldMinutes = distractedPhoneHandheldMinutes
        self.distractedPhoneHandheldPct = distractedPhoneHandheldPct
        self.distractedSwipeTypeMinutes = distractedSwipeTypeMinutes
        self.distractedSwipeTypePct = distractedSwipeTypePct
        self.distractionFreeMinutes = distractionFreeMinutes
        self.distractionFreePct = distractionFreePct
        self.totalDistractedMinutes = totalDistractedMinutes
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        distractedPhoneHandheldMinutes = try container.decodeIfPresent("distractedPhoneHandheldMinutes")
        distractedPhoneHandheldPct = try container.decodeIfPresent("distractedPhoneHandheldPct")
        distractedSwipeTypeMinutes = try container.decodeIfPresent("distractedSwipeTypeMinutes")
        distractedSwipeTypePct = try container.decodeIfPresent("distractedSwipeTypePct")
        distractionFreeMinutes = try container.decodeIfPresent("distractionFreeMinutes")
        distractionFreePct = try container.decodeIfPresent("distractionFreePct")
        totalDistractedMinutes = try container.decodeIfPresent("totalDistractedMinutes")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(distractedPhoneHandheldMinutes, forKey: "distractedPhoneHandheldMinutes")
        try container.encodeIfPresent(distractedPhoneHandheldPct, forKey: "distractedPhoneHandheldPct")
        try container.encodeIfPresent(distractedSwipeTypeMinutes, forKey: "distractedSwipeTypeMinutes")
        try container.encodeIfPresent(distractedSwipeTypePct, forKey: "distractedSwipeTypePct")
        try container.encodeIfPresent(distractionFreeMinutes, forKey: "distractionFreeMinutes")
        try container.encodeIfPresent(distractionFreePct, forKey: "distractionFreePct")
        try container.encodeIfPresent(totalDistractedMinutes, forKey: "totalDistractedMinutes")
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? ApiMoveDistractionDetails else { return false }
      guard self.distractedPhoneHandheldMinutes == object.distractedPhoneHandheldMinutes else { return false }
      guard self.distractedPhoneHandheldPct == object.distractedPhoneHandheldPct else { return false }
      guard self.distractedSwipeTypeMinutes == object.distractedSwipeTypeMinutes else { return false }
      guard self.distractedSwipeTypePct == object.distractedSwipeTypePct else { return false }
      guard self.distractionFreeMinutes == object.distractionFreeMinutes else { return false }
      guard self.distractionFreePct == object.distractionFreePct else { return false }
      guard self.totalDistractedMinutes == object.totalDistractedMinutes else { return false }
      return true
    }

    public static func == (lhs: ApiMoveDistractionDetails, rhs: ApiMoveDistractionDetails) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
