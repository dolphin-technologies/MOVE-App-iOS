//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public class ApiMoveTimelineItemBase: APIModel {

    public var averageSpeedKmh: Int?

    public var distanceMeters: Int?

    public var durationMinutes: Int?

    public var endAddress: String?

    public var endTs: String?

    public var id: Int?

    public var scores: ApiMoveScores?

    public var startAddress: String?

    public var startTs: String?

    public var type: ApiTimelineItemType?

    public init(averageSpeedKmh: Int? = nil, distanceMeters: Int? = nil, durationMinutes: Int? = nil, endAddress: String? = nil, endTs: String? = nil, id: Int? = nil, scores: ApiMoveScores? = nil, startAddress: String? = nil, startTs: String? = nil, type: ApiTimelineItemType? = nil) {
        self.averageSpeedKmh = averageSpeedKmh
        self.distanceMeters = distanceMeters
        self.durationMinutes = durationMinutes
        self.endAddress = endAddress
        self.endTs = endTs
        self.id = id
        self.scores = scores
        self.startAddress = startAddress
        self.startTs = startTs
        self.type = type
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        averageSpeedKmh = try container.decodeIfPresent("averageSpeedKmh")
        distanceMeters = try container.decodeIfPresent("distanceMeters")
        durationMinutes = try container.decodeIfPresent("durationMinutes")
        endAddress = try container.decodeIfPresent("endAddress")
        endTs = try container.decodeAnyIfPresent("endTs")
        id = try container.decodeIfPresent("id")
        scores = try container.decodeIfPresent("scores")
        startAddress = try container.decodeIfPresent("startAddress")
        startTs = try container.decodeAnyIfPresent("startTs")
        type = try container.decodeIfPresent("type")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(averageSpeedKmh, forKey: "averageSpeedKmh")
        try container.encodeIfPresent(distanceMeters, forKey: "distanceMeters")
        try container.encodeIfPresent(durationMinutes, forKey: "durationMinutes")
        try container.encodeIfPresent(endAddress, forKey: "endAddress")
        try container.encodeIfPresent(endTs, forKey: "endTs")
        try container.encodeIfPresent(id, forKey: "id")
        try container.encodeIfPresent(scores, forKey: "scores")
        try container.encodeIfPresent(startAddress, forKey: "startAddress")
        try container.encodeIfPresent(startTs, forKey: "startTs")
        try container.encodeIfPresent(type, forKey: "type")
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? ApiMoveTimelineItemBase else { return false }
      guard self.averageSpeedKmh == object.averageSpeedKmh else { return false }
      guard self.distanceMeters == object.distanceMeters else { return false }
      guard self.durationMinutes == object.durationMinutes else { return false }
      guard self.endAddress == object.endAddress else { return false }
	  guard self.endTs == object.endTs else { return false }
      guard self.id == object.id else { return false }
      guard self.scores == object.scores else { return false }
      guard self.startAddress == object.startAddress else { return false }
	  guard self.startTs == object.startTs else { return false }
      guard self.type == object.type else { return false }
      return true
    }

    public static func == (lhs: ApiMoveTimelineItemBase, rhs: ApiMoveTimelineItemBase) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
