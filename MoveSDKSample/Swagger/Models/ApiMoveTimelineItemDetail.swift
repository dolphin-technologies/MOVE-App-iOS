//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public class ApiMoveTimelineItemDetail: ApiMoveTimelineItemBase {

    public var distractionDetails: ApiMoveDistractionDetails?

    public var distractionEvents: [ApiMoveDistractionEvent]?

    public var drivingEvents: [ApiMoveDrivingEvent]?

    public var endLat: Double?

    public var endLon: Double?

    public var nextTripId: Int?

    public var previousTripId: Int?

    public var sectionDistance: ApiMoveTripSectionDistance?

    public var startLat: Double?

    public var startLon: Double?

    public var tripPoints: [ApiMoveTripPoint]?

    public init(averageSpeedKmh: Int? = nil, distanceMeters: Int? = nil, durationMinutes: Int? = nil, endAddress: String? = nil, endTs: String? = nil, id: Int? = nil, scores: ApiMoveScores? = nil, startAddress: String? = nil, startTs: String? = nil, type: ApiTimelineItemType? = nil, distractionDetails: ApiMoveDistractionDetails? = nil, distractionEvents: [ApiMoveDistractionEvent]? = nil, drivingEvents: [ApiMoveDrivingEvent]? = nil, endLat: Double? = nil, endLon: Double? = nil, nextTripId: Int? = nil, previousTripId: Int? = nil, sectionDistance: ApiMoveTripSectionDistance? = nil, startLat: Double? = nil, startLon: Double? = nil, tripPoints: [ApiMoveTripPoint]? = nil) {
        self.distractionDetails = distractionDetails
        self.distractionEvents = distractionEvents
        self.drivingEvents = drivingEvents
        self.endLat = endLat
        self.endLon = endLon
        self.nextTripId = nextTripId
        self.previousTripId = previousTripId
        self.sectionDistance = sectionDistance
        self.startLat = startLat
        self.startLon = startLon
        self.tripPoints = tripPoints
        super.init(averageSpeedKmh: averageSpeedKmh, distanceMeters: distanceMeters, durationMinutes: durationMinutes, endAddress: endAddress, endTs: endTs, id: id, scores: scores, startAddress: startAddress, startTs: startTs, type: type)
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        distractionDetails = try container.decodeIfPresent("distractionDetails")
        distractionEvents = try container.decodeArrayIfPresent("distractionEvents")
        drivingEvents = try container.decodeArrayIfPresent("drivingEvents")
        endLat = try container.decodeIfPresent("endLat")
        endLon = try container.decodeIfPresent("endLon")
        nextTripId = try container.decodeIfPresent("nextTripId")
        previousTripId = try container.decodeIfPresent("previousTripId")
        sectionDistance = try container.decodeIfPresent("sectionDistance")
        startLat = try container.decodeIfPresent("startLat")
        startLon = try container.decodeIfPresent("startLon")
        tripPoints = try container.decodeArrayIfPresent("tripPoints")
        try super.init(from: decoder)
    }

    public override func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(distractionDetails, forKey: "distractionDetails")
        try container.encodeIfPresent(distractionEvents, forKey: "distractionEvents")
        try container.encodeIfPresent(drivingEvents, forKey: "drivingEvents")
        try container.encodeIfPresent(endLat, forKey: "endLat")
        try container.encodeIfPresent(endLon, forKey: "endLon")
        try container.encodeIfPresent(nextTripId, forKey: "nextTripId")
        try container.encodeIfPresent(previousTripId, forKey: "previousTripId")
        try container.encodeIfPresent(sectionDistance, forKey: "sectionDistance")
        try container.encodeIfPresent(startLat, forKey: "startLat")
        try container.encodeIfPresent(startLon, forKey: "startLon")
        try container.encodeIfPresent(tripPoints, forKey: "tripPoints")
        try super.encode(to: encoder)
    }

    override public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? ApiMoveTimelineItemDetail else { return false }
      guard self.distractionDetails == object.distractionDetails else { return false }
      guard self.distractionEvents == object.distractionEvents else { return false }
      guard self.drivingEvents == object.drivingEvents else { return false }
      guard self.endLat == object.endLat else { return false }
      guard self.endLon == object.endLon else { return false }
      guard self.nextTripId == object.nextTripId else { return false }
      guard self.previousTripId == object.previousTripId else { return false }
      guard self.sectionDistance == object.sectionDistance else { return false }
      guard self.startLat == object.startLat else { return false }
      guard self.startLon == object.startLon else { return false }
      guard self.tripPoints == object.tripPoints else { return false }
      return super.isEqual(to: object)
    }
}
