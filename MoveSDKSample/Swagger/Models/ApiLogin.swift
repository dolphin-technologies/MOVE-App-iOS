//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public class ApiLogin: APIModel {

    public var consents: [ApiUserConsent]?

    public var contractId: String?

    public var productAuthInfo: ApiProductAuthInfo?

    public var sdkUserLoginInfo: ApiSdkUserLoginInfo?

    public init(consents: [ApiUserConsent]? = nil, contractId: String? = nil, productAuthInfo: ApiProductAuthInfo? = nil, sdkUserLoginInfo: ApiSdkUserLoginInfo? = nil) {
        self.consents = consents
        self.contractId = contractId
        self.productAuthInfo = productAuthInfo
        self.sdkUserLoginInfo = sdkUserLoginInfo
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        consents = try container.decodeArrayIfPresent("consents")
        contractId = try container.decodeIfPresent("contractId")
        productAuthInfo = try container.decodeIfPresent("productAuthInfo")
        sdkUserLoginInfo = try container.decodeIfPresent("sdkUserLoginInfo")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(consents, forKey: "consents")
        try container.encodeIfPresent(contractId, forKey: "contractId")
        try container.encodeIfPresent(productAuthInfo, forKey: "productAuthInfo")
        try container.encodeIfPresent(sdkUserLoginInfo, forKey: "sdkUserLoginInfo")
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? ApiLogin else { return false }
      guard self.consents == object.consents else { return false }
      guard self.contractId == object.contractId else { return false }
      guard self.productAuthInfo == object.productAuthInfo else { return false }
      guard self.sdkUserLoginInfo == object.sdkUserLoginInfo else { return false }
      return true
    }

    public static func == (lhs: ApiLogin, rhs: ApiLogin) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
