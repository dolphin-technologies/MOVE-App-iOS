/*
 *  Copyright 2023 Dolphin Technologies GmbH
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *       http:*www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 * /
 */
import Foundation
import DolphinMoveSDK
import CoreLocation
import Combine
import SwiftUI

class TimelineEventModel: Identifiable, Equatable {
	static func == (lhs: TimelineEventModel, rhs: TimelineEventModel) -> Bool {
		lhs === rhs
	}

	/// Endpoint with time/coords/address.
	struct Endpoint {
		let coord: CLLocationCoordinate2D
		var timestamp: Date
		var address: String
	}

	/// Identifier.
	var id: Int

	/// Start time/address/coords.
	var start: Endpoint

	/// End time/address/coords.
	var end: Endpoint

	/// Next trip.
	var prev: TimelineEventModel?

	/// Previous trip.
	var next: TimelineEventModel?

	/// Can get previous trip.
	var hasPrev: Bool = true

	/// Can get next trip.
	var hasNext: Bool = true

	/// Timeline event type.
	var type: ApiTimelineItemType

	/// Trip score.
	var totalScore: Int

	/// Trip duration.
	var duration: Int

	/// Format start/end dates.
	var dates: String {
		let start = TimelineModel.shared.timeFormatter.string(from: start.timestamp)
		let end = TimelineModel.shared.timeFormatter.string(from: end.timestamp)
		return "\(start) - \(end)"
	}

	/// Determine whether detail view is available.
	var hasDetails: Bool {
		switch type {
		case .car, .cycling:
			return true
		case .bus, .train, .metro, .tram:
			/* disabled for now */
			return false
		case .unknown, .walking, .idle, .faketrip, .publicTransport:
			return false
		}
	}

	/// Static initializer, for previews only.
	init() {
		id = 0
		start = Endpoint(coord: CLLocationCoordinate2D(latitude: 0.0, longitude: 0.0), timestamp: Date(), address: "Start")

		end = Endpoint(coord: CLLocationCoordinate2D(latitude: 0.0, longitude: 0.0), timestamp: Date(), address: "End")

		duration = 120
		totalScore = 76
		type = .car
	}

	/// Convert ApiMoveTimelineItemBase to Trip object.
	/// - parameters:
	///   - obj: Autogenerated API object.
	init(_ obj: ApiMoveTimelineItemBase) {
		let startTs = TimelineModel.shared.parseformatter.date(from: obj.startTs!)!
		let endTs = TimelineModel.shared.parseformatter.date(from: obj.endTs!)!

		duration = obj.durationMinutes ?? 0
		totalScore = obj.scores?.total ?? 100
		id = obj.id!
		type = obj.type!

		start = Endpoint(coord: CLLocationCoordinate2D(latitude: 0.0, longitude: 0.0), timestamp: startTs, address: obj.startAddress ?? "")

		end = Endpoint(coord: CLLocationCoordinate2D(latitude: 0.0, longitude: 0.0), timestamp: endTs, address: obj.endAddress ?? "")
	}

	/// Fetch trip details.
	/// - returns: TripDetails from request.
	/// - throws: network errors
	func fetchDetails() async throws -> TripDetails {
		let details = try await AppManager.shared.getTripDetails(id: id)
		return TripDetails(trip: self, details: details)
	}
}
